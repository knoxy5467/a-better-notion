	

@startuml sequence_demo
participant Participant as Foo
actor       Actor       as Foo1
boundary    Boundary    as Foo2
control     Control     as Foo3
entity      Entity      as Foo4
database    Database    as Foo5
collections Collections as Foo6
queue       Queue       as Foo7
Foo -> Foo1 : To actor 
Foo -> Foo2 : To boundary
Foo -> Foo3 : To control
Foo -> Foo4 : To entity
Foo -> Foo5 : To database
Foo -> Foo6 : To collections
Foo -> Foo7: To queue
@enduml

@startuml middleware_create_task
group "Create New Task"
	participant User
	participant UI
	participant State
	participant Backend
	User -> UI : User interacts with UI: <<New Task>>
	activate UI
	
	UI -> State : async fn <<createNewTask()>>
	activate State
	State -> UI : Notify frontend of state change. (Task marked as unsaved)
	UI -> User : User sees new unsaved task that has been created.
	deactivate UI

	State -> State : Checks local state for unsyncronized data.
	alt found unsyncronized data
		State -> Backend : POST <<CreateTaskRequest>> to /task
		alt request successful
			Backend -> State : State receives <<CreateTaskResponse>> 
			
		else request error
			State -> Backend : repeat request, exponential backoff 
			alt request eventually successful
				State -> 
			else
			end
		end
		State -> UI : notify UI of state change.
		activate UI
	end
	UI -> User : User sees task has been saved in DB.
	deactivate UI
end
@enduml


@startuml middleware_activate_view
group "Activate View"
	participant User
	participant UI
	participant State
	participant Backend
	User -> UI : User interacts with UI: <<View "Main">>
	activate UI
	
	UI -> State : async fn <<getView(view_id, range)>>
	activate State
	State -> UI : Notify frontend of state change. (Task marked as unsaved)
	UI -> User : User sees new unsaved task that has been created.
	deactivate UI

	State -> State : Checks local state for unsyncronized data.
	alt found unsyncronized data
		State -> Backend : POST <<CreateTaskRequest>> to /task
		alt request successful
			Backend -> State : State receives <<CreateTaskResponse>> 
			
		else request error
			State -> Backend : repeat request, exponential backoff 
			alt request eventually successful
				State -> 
			else
			end
		end
		State -> UI : notify UI of state change.
		activate UI
	end
	UI -> User : User sees task has been saved in DB.
	deactivate UI
end
@enduml
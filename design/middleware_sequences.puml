	

@startuml sequence_demo
participant Participant as Foo
actor       Actor       as Foo1
boundary    Boundary    as Foo2
control     Control     as Foo3
entity      Entity      as Foo4
database    Database    as Foo5
collections Collections as Foo6
queue       Queue       as Foo7
Foo -> Foo1 : To actor 
Foo -> Foo2 : To boundary
Foo -> Foo3 : To control
Foo -> Foo4 : To entity
Foo -> Foo5 : To database
Foo -> Foo6 : To collections
Foo -> Foo7: To queue
@enduml

@startuml middleware_create_task
group "Create New Task"
	participant User
	participant UI
	participant State
	participant Backend
	User -> UI : User interacts with UI: <<New Task>>
	activate UI
	
	UI -> State : fn <<task_create()>>
	activate State
	State -> UI : Sends back reference to a new Task reference
	UI -> User : User sees new task they can edit.
	deactivate UI

	State -> State : Checks local state for unsaved data.
	alt found unsaved data
		State -> Backend : POST <<CreateTaskRequest>> to /task
		alt request successful
			Backend -> State : State receives <<CreateTaskResponse>> 
			State -> State : Queue Event <<TaskUpdate(TaskID)>>
		else request error
			State -> Backend : repeat request, exponential backoff 
			State -> State : Queue Event <<ServerStatus(false)>>
			alt request eventually successful
				State -> State : Queue Event <<ServerStatus(true)>>
			else
				State -> State : Queue Event <<ServerStatus(false)>>
			end
		end
	end
	activate UI
	State -> UI : Send queued events to UI.
	UI -> User : User sees queued events notifying of new task/server status
	deactivate UI
end
@enduml


@startuml middleware_activate_view
group "Activate View"
	participant User
	participant UI
	participant State
	participant Backend
	User -> UI : User interacts with UI: <<View "Main">>
	activate UI
	
	UI -> State : fn <<view_get(view_id)>>
	activate State
	State -> UI : Returns `View` reference
	UI -> User : User sees new unsaved task that has been created.
	deactivate UI

	State -> State : Checks local state for unsaved data.
	alt found unsaved data
		State -> Backend : POST <<CreateViewRequest>> to /task
		alt request successful
			Backend -> State : State receives <<CreateViewResponse>> 
			State -> State : ViewUpdate(ViewID)
			
		else request error
			State -> Backend : repeat request, exponential backoff 
			alt request eventually successful
				State -> State : Queue UI Event to notify UI that task has been saved to server.
			else
				State -> State : Queue UI Event to notify that Server is unavailable.
			end
		end
		activate UI
	end
	State -> UI : notify UI of queued events.
	UI -> User : User sees relevant UI display of save/disconnect event
	deactivate UI
end
@enduml
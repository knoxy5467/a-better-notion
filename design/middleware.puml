@startuml class_demo
abstract        abstract
abstract class  "abstract class"
annotation      annotation
circle          circle
()              circle_short_form
class           class
class           class_stereo  <<stereotype>>
diamond         diamond
<>              diamond_short_form
entity          entity
enum            enum
exception       exception
interface       interface
metaclass       metaclass
protocol        protocol
stereotype      stereotype
struct          struct
@enduml

@startuml "frontend_api"
package "Frontend API" {
	enum PropDataError {
		InvalidTask
		UndefinedProp(String)
	}

	interface DataAPI {
		task_def(&mut self, task: Task) -> TaskKey;
		task_get(&self) -> Option<&Task>
		task_mod(&mut self, key: TaskKey, edit_fn: impl FnOnce(&mut TaskShort))
		task_rm(&mut self, key: TaskKey)

		prop_def(&mut self, task_key: TaskKey, name: &str, prop: TaskPropVariant) -> PropKey;
		prop_mod(&mut self, task_key: TaskKey, name: &str, edit_fn: impl FnOnce(&mut TaskPropVariant)) -> Option<()>
		prop_get(&self, task_key: TaskKey, string: &str) -> Result<&Prop, PropDataError>
		prop_rm(&mut self, task_key: TaskKey, name: &str)

		view_def(&mut self, view: View) -> ViewKey
		view_get(&self, view_id: ViewKey) -> Option<&View>
		view_mod(&mut self, view_id: ViewKey, edit_fn: impl FnOnce(&mut View)) -> Option<()>
		view_rm(&mut self, view_id: ViewKey)

		script_create(&mut self) -> ScriptID
		script_get(&self, view_id: ScriptID) -> &View
		script_mod(&mut self, view_id: ScriptID, edit_fn: impl FnOnce(&mut Script))
		script_rm(&mut self, view_id: ScriptID)
		
		ui_event(&mut self, &str)
		script_event_notify(&mut self, UIEvent)
	}
	DataAPI *-- PropDataError

	enum ScriptEvent {
		' UI Triggers that cause
		RegisteredEvent(&'static str),
	}
	
	enum StateUpdate {
		TaskUpdate(TaskID)
		ViewUpdate(ViewKey)
		ScriptUpdate(ScriptID)
		MultiStateUpdate
		ServerStatusUpdate(bool)
	}

	note bottom of StateUpdate
		This enum is an event that is 
		sent to the frontend when 
		middleware state changes.
	end note
}
@enduml

@startuml "middleware_state"
package "Middleware State" {
	enum "TaskPropVariant" {
		Date(Date)
		String(String),
		Number(f64),
		Boolean(bool),
	}
	struct "TaskProp" {
		+ name : String
		+ prop: TaskPropVariant
	}
	TaskPropVariant -* TaskProp : prop
	struct "TaskShort" {
		+ task_id : TaskID
		+ name: String
		+ completed : bool
		+ dependencies : Vec<TaskID>
		+ scripts: Vec<ScriptID>
	}

	struct "Script" {
		+ content: String
	}

	enum "Comparator" {
		LT, LEQ, GT, GEQ, EQ, NEQ, CONTAINS, NOTCONTAINS, REGEX
	}
	enum "Operator" {
		AND, OR
	}
	enum "Filter" {
		Leaf [
			comparator: Comparator
			field: TaskProp
			immediate: TaskPropVariant
		]
		Operator [
			op: Operator
			childs: Vec<Filter>
		]
	}
	Comparator --* Filter : Leaf.comparator
	Operator --* Filter : Operator.op
	TaskProp --* Filter : Leaf.field
	TaskPropVariant --* Filter : Leaf.immediate
	Filter --* Filter : Operator.childs

	struct "View" {
		filter: Filter
		props: Vec<String>
		max_tasks: Option<u64>
		tasks: Vec<TaskID>
	}
	View *-- Filter : filter

	struct "PropKey" {
		key: u32
		version: u32
	}
	struct "TaskKey" {
		key: u32
		version: u32
	}

	struct "State" as main_state {
		+ tasks: HashMap<TaskID, TaskShort>
		+ prop_map: HashMap<(TaskID, String), PropKey>
		+ props: SlotMap<PropKey, TaskPropVariant>
		+ views: HashMap<ViewKey, View>
		+ scripts: HashMap<ScriptID, Script>
	}

	main_state *-- TaskShort : tasks
	main_state *-- PropKey : props
	main_state *-- TaskPropVariant : props
	main_state *-- View : views
	main_state *-- Script : scripts

}
@enduml

@startuml "backend_api"
left to right direction
package "Backend API" {
	package "Properties" {
		interface "/prop" as prop_api {
			GET: PropertyRequest -> PropertyResponse 
		}
		interface "/props" as props_api {
			GET: PropertiesRequest -> PropertiesResponse
		}
		struct PropertyRequest {
			task_id: TaskID
			properties: Vec<String>
		}
		struct PropertyResponse {
			Vec<TaskProp>
		}
		struct PropertiesRequest {
			task_ids: Vec<TaskID>
			properties: Vec<String>
		}
		struct PropertiesResponse {
			Vec<(String, Vec<TaskPropVariant>)>
		}
		prop_api *-- PropertyRequest
		prop_api *-- PropertyResponse
		props_api *-- PropertiesRequest
		props_api *-- PropertiesResponse
	}
	
		
	package "Tasks API" {

		interface "/tasks" as tasks_api {
			POST: CreateTasksRequest -> CreateTaskResponse
			GET: GetTasksResponse -> GetTasksResponse
			PUT: UpdateTasksRequest -> UpdateTasksResponse
			DELETE: DeleteTasksRequest -> DeleteTasksResponse
		}
		struct CreateTasksRequest {
			Vec<CreateTaskRequest>
		}
		struct CreateTasksResponse {
			Vec<Option<TaskID>>
		}
		struct ReadTasksShortRequest {
			Vec<ReadTaskShortRequest>
		}
		struct ReadTasksShortResponse {
			Vec<Option<ReadTaskShortResponse>>
		}
		struct UpdateTasksRequest {
			Vec<UpdateTaskRequest>
		}
		struct UpdateTasksResponse {
			Vec<Option<UpdateTaskResponse>>
		}
		struct DeleteTasksRequest {
			Vec<DeleteTaskRequest>
		}
		struct DeleteTasksResponse {
			Vec<Option<DeleteTaskResponse>>
		}
		ReadTasksShortRequest -[hidden]u- ReadTasksShortResponse
		DeleteTasksRequest -[hidden]u- DeleteTasksResponse
		tasks_api *-u- CreateTasksRequest
		tasks_api *-u- CreateTasksResponse
		tasks_api *-r- ReadTasksShortRequest 
		tasks_api *-r- ReadTasksShortResponse 
		tasks_api *-d- UpdateTasksRequest
		tasks_api *-d- UpdateTasksResponse
		tasks_api *-l- DeleteTasksRequest 
		tasks_api *-l- DeleteTasksResponse
	}
	package "Filter API" {
		struct "FilterTaskIDsRequest" {
			filter: Filter
		}
		FilterTaskIDsRequest *---- Filter : filter
		struct "FilterTaskIDsResponse" {
			Vec<TaskID>
		}
		struct "FilterTaskRequest" {
			filter: Filter
			props: Vec<String>
		}
		FilterTaskRequest *---- Filter : filter

		struct "FilterTaskResponse" {
			Vec<Task>
		}
		FilterTaskResponse *---- Task

		interface "/filterid" as filterid_api {
			GET: FilterTaskIDsRequest -> FilterTaskIDsResponse
		}
		interface "/filter" as filter_api {
			GET: FilterTasksRequest -> FilterTaskResponse
		}

		filter_api *-d- FilterTaskRequest
		filter_api *-d- FilterTaskResponse

		filterid_api *-d- FilterTaskIDsRequest
		filterid_api *-d- FilterTaskIDsResponse
	}
	package "Task API" {

		'POST
		struct "CreateTaskRequest" {
			name: String
			completed: bool
			properties: Vec<TaskProp>
			dependencies: Vec<TaskID>
				scripts: Vec<ScriptID>
		}
		struct "CreateTaskResponse" {
			TaskID
		}

		'GET
		struct "ReadTaskShortRequest" {
			task_id: TaskID
		}
		struct "ReadTaskShortResponse" {
			task_id: TaskID
			name: String
			completed: bool
			props: Vec<String>
			deps: Vec<TaskID>
			scripts: Vec<ScriptID>
		}

		'PUT
		struct "UpdateTaskRequest" {
			task_id: TaskID,
			name: Option<String>,
			checked: Option<bool>,
			props_to_add: Vec<TaskProp>,
			props_to_remove: Vec<String>,
			deps_to_add: Vec<TaskID>,
			deps_to_remove: Vec<TaskID>,
			scripts_to_add: Vec<ScriptID>,
			scripts_to_remove: Vec<ScriptID>
		}
		struct "UpdateTaskResponse" {
			TaskID
		}
		UpdateTaskResponse -[hidden]r- UpdateTaskRequest

		'DELETE
		struct "DeleteTaskRequest" {
			task_id: TaskID
		}
		struct "DeleteTaskResponse"
		DeleteTaskRequest -[hidden]d- DeleteTaskResponse


		interface "/task" as task_api {
			POST: CreateTaskRequest -> CreateTaskResponse
			GET: GetTaskRequest -> GetTaskResponse
			PUT: UpdateTasks -> UpdateTaskRequest
			DELETE: DeleteTasks -> DeleteTaskRequest
		}
		task_api *-u- CreateTaskRequest
		task_api *-u- CreateTaskResponse
		task_api *-r- ReadTaskShortRequest
		task_api *-r- ReadTaskShortResponse
		task_api *-d- UpdateTaskRequest
		task_api *-d- UpdateTaskResponse
		task_api *-l- DeleteTaskRequest
		task_api *-l- DeleteTaskResponse
	}
	
	package "Tasks API" {
		ReadTasksShortRequest -[hidden]u- ReadTasksShortResponse
		DeleteTasksRequest -[hidden]u- DeleteTasksResponse

		interface "/tasks" as tasks_api {
			POST: CreateTasksRequest -> CreateTaskResponse
			GET: GetTasksResponse -> GetTasksResponse
			PUT: UpdateTasksRequest -> UpdateTasksResponse
			DELETE: DeleteTasksRequest -> DeleteTasksResponse
		}
		tasks_api *-u- CreateTasksRequest
		tasks_api *-u- CreateTasksResponse
		tasks_api *-r- ReadTasksShortRequest 
		tasks_api *-r- ReadTasksShortResponse 
		tasks_api *-d- UpdateTasksRequest
		tasks_api *-d- UpdateTasksResponse
		tasks_api *-l- DeleteTasksRequest 
		tasks_api *-l- DeleteTasksResponse
	}
	package "Filter API" {
		struct "FilterTaskIDsRequest" {
			filter: Filter
		}
		struct "FilterTaskIDsResponse" {
			Vec<TaskID>
		}
		struct "FilterTaskRequest" {
			filter: Filter
			props: Vec<String>
		}
		struct "FilterTaskResponse" {
			Vec<Task>
		}

		interface "/filterid" as filterid_api {
			GET: FilterTaskIDsRequest -> FilterTaskIDsResponse
		}
		interface "/filter" as filter_api {
			GET: FilterTasksRequest -> FilterTaskResponse
		}

		filter_api *-d- FilterTaskRequest
		filter_api *-d- FilterTaskResponse

		filterid_api *-d- FilterTaskIDsRequest
		filterid_api *-d- FilterTaskIDsResponse
	}

	package "View API" {
		struct "CreateViewRequest" {
			view: View
		}
		CreateViewRequest *-- View
		interface "/view" as view_api {
			POST: CreateViewRequest -> CreateViewResponse
			GET: GetViewRequest -> GetViewResponse
			PUT: UpdateViewRequest -> UpdateViewResponse
			DELETE: DeleteViewRequest -> DeleteViewResponse
		}
		GetViewRequest -[hidden]d- GetViewResponse
		DeleteViewRequest -[hidden]- DeleteViewResponse

		view_api *-u- CreateViewRequest
		view_api *-u- CreateViewResponse
		view_api *-r- GetViewRequest
		view_api *-r- GetViewResponse
		view_api *-d- UpdateViewRequest
		view_api *-d- UpdateViewResponse
		view_api *-l- DeleteViewRequest
		view_api *-l- DeleteViewResponse
	}

}
@enduml

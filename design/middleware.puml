@startuml test
abstract        abstract
abstract class  "abstract class"
annotation      annotation
circle          circle
()              circle_short_form
class           class
class           class_stereo  <<stereotype>>
diamond         diamond
<>              diamond_short_form
entity          entity
enum            enum
exception       exception
interface       interface
metaclass       metaclass
protocol        protocol
stereotype      stereotype
struct          struct
@enduml

@startuml
package "Middlware" {
	package "State" {
		enum "TaskPropVariant" {
			Date(Date)
			String(String),
			Number(f64),
			Boolean(bool),
		}
		struct "TaskProp" {
			+ name : String
			+ prop: TaskPropVariant
		}
		TaskPropVariant -* TaskProp : prop
		struct "Task" {
			+ task_id : TaskID
			+ name: String
			+ completed : bool
			+ properties : Vec<String, Option<TaskProp>>
			+ dependencies : Vec<TaskID>
			+ scripts: Vec<ScriptID>
		}
		TaskProp --* Task : properties

		struct "UIState" as ui_state {
			...
		}

		struct "State" as main_state {
			+ tasks: SlotMap<TaskID, Task>
			+ ui: UIState
		}
		main_state *-- ui_state : ui
		main_state *-- Task : tasks

		enum "Comparator" {
			LT, LEQ, GT, GEQ, EQ, NEQ, CONTAINS, NOTCONTAINS, REGEX
		}
		enum "Operator" {
			AND, OR
		}
		enum "Filter" {
			Leaf [
				comparator: Comparator
				field: TaskProp
				immediate: TaskPropVariant
			]
			Operator [
				op: Operator
				childs: Vec<Filter>
			]
		}
		Comparator --* Filter : Leaf.comparator
		Operator --* Filter : Operator.op
		TaskProp --* Filter : Leaf.field
		TaskPropVariant --* Filter : Leaf.immediate
		Filter --* Filter : Operator.childs

		struct "View" {
			filter: Filter,
			props: Vec<String>
			max_tasks: Option<u64>
		}
		View *-- Filter : filter
	}
	package "Backend API" {
		interface "/task" as task_api {
			POST: CreateTaskRequest -> CreateTaskResponse
			GET: GetTaskRequest -> GetTaskResponse
			PUT: UpdateTasks -> UpdateTaskRequest
			DELETE: DeleteTasks -> DeleteTaskRequest
		}
		interface "/tasks" as tasks_api {
			POST: CreateTasksRequest -> CreateTaskResponse
			GET: GetTasksResponse -> GetTasksResponse
			PUT: UpdateTasksRequest -> UpdateTasksResponse
			DELETE: DeleteTasksRequest -> DeleteTasksResponse
		}

		package "CreateTask" {
			struct "CreateTaskRequest" {
				name: String
				completed: bool
				properties: Vec<TaskProp>
				dependencies: Vec<TaskID>
			}
			TaskProp *---- CreateTaskRequest
			CreateTaskRequest ---* task_api
			struct "CreateTaskResponse" {
				TaskID
			}
			CreateTaskResponse ---* task_api
			CreateTasksRequest ---* tasks_api
			CreateTasksResponse ---* tasks_api
		}

		CreateTask -[hidden]d- task_api
		CreateTask -[hidden]d- tasks_api
		
		package "ReadTask" {
			struct "ReadTaskShortRequest" {
				task_id: TaskID
			}
			ReadTaskShortRequest --* task_api
			struct "ReadTaskShortResponse" {
				task_id: TaskID
				name: String
				completed: bool
				props: Vec<String>
				deps: Vec<TaskID>
				scripts: Vec<ScriptID>
			}
			ReadTaskShortResponse --* task_api
			ReadTasksShortData --* tasks_api
			ReadTasksShortResponse --* tasks_api
		}
		
		package "UpdateTask" {
			struct "UpdateTaskRequest" {
				task_id: TaskID,
				name: Option<String>,
				checked: Option<bool>,
				props_to_add: Vec<TaskProp>,
				props_to_remove: Vec<String>,
				deps_to_add: Vec<TaskID>,
				deps_to_remove: Vec<TaskID>,
				scripts_to_add: Vec<ScriptID>,
				scripts_to_remove: Vec<ScriptID>
			}
			TaskProp *---- UpdateTaskRequest : props_to_add
			UpdateTaskRequest ---* task_api
			struct "UpdateTaskResponse" {
				TaskID
			}
			UpdateTaskResponse ---* task_api

			UpdateTasksRequest ---* tasks_api
			UpdateTasksResponse ---* tasks_api
		}
		UpdateTask -[hidden]u- task_api
		UpdateTask -[hidden]u- tasks_api

		package "DeleteTask" {
			struct "DeleteTaskRequest" {
				task_id: TaskID
			}
			struct "DeleteTaskResponse"
			DeleteTaskRequest ---* task_api
			DeleteTaskResponse ---* task_api
			DeleteTasksRequest ---* tasks_api
			DeleteTasksResponse ---* tasks_api
		}
		
		struct "FilterTaskIDsRequest" {
			filter: Filter
		}
		FilterTaskIDsRequest *---- Filter : filter
		FilterTaskIDsRequest --* filterid_api
		struct "FilterTaskIDsResponse" {
			Vec<TaskID>
		}
		FilterTaskIDsResponse --* filterid_api
		struct "FilterTaskRequest" {
			filter: Filter
			props: Vec<String>
		}
		FilterTaskRequest *---- Filter : filter
		FilterTaskRequest --* filter_api

		struct "FilterTaskResponse" {
			Vec<Task>
		}
		FilterTaskResponse *---- Task
		FilterTaskResponse --* filter_api

		interface "/filterid" as filterid_api {
			GET: FilterTaskIDsRequest -> FilterTaskIDsResponse
		}
		interface "/filter" as filter_api {
			GET: FilterTasksRequest -> FilterTaskResponse
		}
		
	}
	"Backend API" ----[hidden]u----------------- "State"
}
@enduml
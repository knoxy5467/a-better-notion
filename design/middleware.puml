@startuml test
abstract        abstract
abstract class  "abstract class"
annotation      annotation
circle          circle
()              circle_short_form
class           class
class           class_stereo  <<stereotype>>
diamond         diamond
<>              diamond_short_form
entity          entity
enum            enum
exception       exception
interface       interface
metaclass       metaclass
protocol        protocol
stereotype      stereotype
struct          struct
@enduml

@startuml
package "Middlware" {
	package "UI State" {
		enum "TaskPropVariant" as task_prop_var {
			Date(Date)
			String(String),
			Number(f64),
			Boolean(bool),
		}
		entity "TaskProp" as task_prop {
			+ name : String
			+ prop: TaskPropVariant
		}
		task_prop_var --* task_prop : prop
		entity "Task" as task {
			+ task_id : TaskID
			+ name: String
			+ completed : bool
			+ properties : Vec<String, Option<TaskProperty>>
			+ dependencies : Vec<TaskID>
			+ scripts: Vec<ScriptID>
		}
		task_prop --* task : properties

		entity "UIState" as ui_state {
			...
		}

		entity "State" as main_state {
			+ tasks: SlotMap<TaskID, Task>
			+ ui: UIState
		}
		main_state *-- ui_state : ui
		main_state *-- task : tasks
	}
	package "Backend API" {
		interface "/task" as task_api {
			POST: CreateTaskRequest -> CreateTaskResponse
			GET: GetTaskRequest(Vec<TaskID>) -> GetTaskResponse
			PUT: UpdateTasks(Vec<Task>) -> UpdateTaskRequest
			DELETE: DeleteTasks(Vec<TaskID>) -> DeleteTaskRequest
		}
		interface "/tasks" as tasks_api {
			POST: CreateTasksRequest -> CreateTaskResponse
			GET: GetTasksResponse -> GetTasksResponse
			PUT: UpdateTasksRequest -> UpdateTasksResponse
			DELETE: DeleteTasksRequest -> DeleteTasksResponse
		}
		interface "/filterid" as filterid_api {
			GET: GetTasksResponse -> GetTasksResponse
		}
		interface "/filter" as filter_api {
			GET: FilterTasksRequest -> FilterTaskResponse
		}
		interface "/view" as view_api {
			...
		}

		interface "CreateTaskRequest" {
			name: String
			completed: bool
			properties: Vec<TaskProp>
			dependencies: Vec<TaskID>
		}
		CreateTaskRequest --* task_api
		interface "CreateTaskResponse" {
			TaskID
		}
		CreateTaskResponse --* task_api
		CreateTasksRequest --* tasks_api
		CreateTasksResponse --* tasks_api
	}
}
@enduml
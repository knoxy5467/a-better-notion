@startuml test
abstract        abstract
abstract class  "abstract class"
annotation      annotation
circle          circle
()              circle_short_form
class           class
class           class_stereo  <<stereotype>>
diamond         diamond
<>              diamond_short_form
entity          entity
enum            enum
exception       exception
interface       interface
metaclass       metaclass
protocol        protocol
stereotype      stereotype
struct          struct
@enduml

@startuml
package "Middlware" {
	package "UI State" {
		enum "TaskPropertyVariant" as task_prop_var {
			Date(Date)
			String(String),
			Number(f64),
			Boolean(bool),
		}
		entity "TaskProperty" as task_prop {
			+ name : String
			+ prop: TaskPropertyVariant
		}
		task_prop_var --* task_prop : prop
		entity "Task" as task {
			+ task_id : TaskID
			+ properties : Vec<String, Option<TaskProperty>>
			+ description : String
			+ completed : bool
			+ dependencies : Vec<TaskID>
		}
		task_prop --* task : properties

		entity "TaskTable" as task_table {
			+ tasks: SlotMap<TaskID, Task>
		}
		task_table -> task
	}
	package "Frontend API" {
		interface "Thing" {
			async ExecuteRequest<R>(request: R) -> R::Result
		}
		interface "Tasks" {
			CreateTasks(Vec<Task>) -> CreateTaskRequest
			UpdateTasks(Vec<Task>) -> UpdateTaskRequest
			DeleteTasks(Vec<TaskID>) -> DeleteTaskRequest
			GetTasks(Vec<TaskID>) -> GetTaskRequest
		}
	}
}
@enduml